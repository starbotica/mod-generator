# mod generator by Estrella Utrera Montes
# TODO- CREAR RECETAS SHAPE
import streamlit as st

idioma = st.radio("Language",("English", "Español"))

if idioma == "Español":
    st.title("Generador de mods para minetest")
    st.write("Creado en StarBótica, tu academia de programación en Sevilla.")    
    st.write("Autora: Estrella Utrera Montes.")
else:
    st.title("Mod generator for minetest")
    st.write("Made by Estrella Utrera Montes.")
st.write("www.starbotica.com")

def frase(i):
    if idioma=="Español":
        frases=["¿Qué deseas crear?",
                "¿Deseas añadir traducciones?",
                "Nombre del mod",
                "Nombre del item",
                "Descripción",
                "¿Una sola imagen para todas las caras o cada cara distinta?",
                "Una sola imagen",
                "Cada cara distinta",
                "Modo",
                "¿Tipo normal o tipo planta?",
                "Tu código:",
                "Añadir código",
                "¡Código añadido!",
                "Con imagen de inventario",
                "Tipo",
                "Producto",
                "Ingrediente",
                "vacío",
                "Para indicar que es obligatorio dejar vacío el espacio, marca 'vacío'.",
                "Ingrediente",
                "Cantidad",
                "Descargar código"
        ]
    if idioma=="English":
        frases=["What would you wish to create?",
                "Do you want to add translation features?",
                "mod name",
                "item name",
                "Description",
                "The same texture for every side or different textures for each side?",
                "The same texture",
                "Different textures",
                "Dig mode",
                "Normal or plantlike?",
                "Your code:",
                "Add code",
                "Code added!",
                "Inventory image",
                "Type",
                "Product",
                "Ingredient",
                "empty",
                "Indicate that there must be an empty space by checking 'empty'.",
                "Ingredient",
                "Quantity",
                "Download code"
        ]
    return frases[i]

tab8 = " "*8

# si no hay código guardado, lo inicializamos
if "codigo_completo" not in st.session_state:
    st.session_state.codigo_completo=""
# una vez elegido nombre no permitimos que cambie
if "nombre_fijado" not in st.session_state:
    st.session_state.nombre_fijado=""

# guardamos en la variable lo que hubiéramos generado hasta ahora
codigo_total=st.session_state.codigo_completo

cabecera =  "-- mod generated by minetest-mod-generator\n" \
            "-- https://mod-generator.streamlit.app/\n" \
            "-- https://forum.minetest.net/viewtopic.php?p=421289#p421289\n" \
            "-- www.starbotica.com\n"

grupos=["crumbly","cracky", "snappy", "choppy","fleshy","explody","oddly_breakable_by_hand"]

# ingredientes para las recetas, del 0 al 8
ireq=[]
ingredientes=[]

# validar nombre, dejando solo caracteres permitidos
def validar(nombre):
    # quitar espacios delante y detrás
    nombre=nombre.strip()
    # si encontramos espacios dentro los reemplazamos con guiones bajos
    nombre=nombre.replace(" ","_")
    # todo minúsculas
    nombre=nombre.lower()
    return "".join(e for e in nombre if (e.isalnum() or "_"))

def crearDescripcion(descripcion):
    linea=""
    if descripcion!="":            
        if traducir:
            linea=f'{tab8}description = '+f'S("{descripcion}"),\n'
        else:
            linea=f'{tab8}description = "{descripcion}",\n'
    return linea

def crearInventario(inventario):
    if inventario:
        return f'{tab8}inventory_image = "{mimod}_{miitem}.png",\n'
    else:
        return ""

def crearGrupos(modo):
    grupos=""
    for m in modo:
        grupos+=m+" = 3,"

    if grupos!="":
        grupos=f'groups = {{{grupos}}}'
    return grupos

def crearNodo(miitem,descripcion,una_o_varias,resp_planta,modo,inventario):
    codigo_nodo=""

    descripcion=crearDescripcion(descripcion)
    inv=crearInventario(inventario)

    if una_o_varias==frase(6):
        imagenes=f'{tab8}tiles = {{"{mimod}_{miitem}.png"}},'        
        if resp_planta=="plantlike":
            imagenes+=f'\n{tab8}drawtype = "plantlike",'
    else:
        imagenes=f"{tab8}tiles = {{\n{tab8}"+ \
            f'{tab8}"{mimod}_{miitem}_top.png",     -- y+\n{tab8}'+ \
            f'{tab8}"{mimod}_{miitem}_bottom.png",  -- y-\n{tab8}'+ \
            f'{tab8}"{mimod}_{miitem}_right.png",   -- x+\n{tab8}'+ \
            f'{tab8}"{mimod}_{miitem}_left.png",    -- x-\n{tab8}'+ \
            f'{tab8}"{mimod}_{miitem}_back.png",    -- z+\n{tab8}'+ \
            f'{tab8}"{mimod}_{miitem}_front.png",   -- z-\n{tab8}'+ \
            f'}},'
    grupos=crearGrupos(modo)
    if grupos!="":
        grupos=f"\n{tab8}"+grupos
    codigo_nodo = f'minetest.register_node("{mimod}:{miitem}",{{\n'\
        f'{descripcion}' \
        f'{inv}' \
        f'{imagenes}' \
        f'{grupos}\n}})'

    return codigo_nodo

def crearCraftItem(miitem,descripcion,inventario):
    codigo_craftitem=""
    descripcion=crearDescripcion(descripcion)
    inv=crearInventario(inventario)
    codigo_craftitem = f'minetest.register_craftitem("{mimod}:{miitem}",{{\n'\
        f'{descripcion}' \
        f'{inv}}})'
    return codigo_craftitem

def crearTool(miitem,descripcion,inventario,modo):
    codigo_tool=""
    descripcion=crearDescripcion(descripcion)
    inv=crearInventario(inventario)
    grupos=crearGrupos(modo)
    if grupos!="":
        grupos=f"{tab8}{tab8}damage_"+grupos+"\n"
    tool_capabilities=f'{tab8}tool_capabilities = {{\n{tab8}'\
        f'{tab8}full_punch_interval = {fpi},\n{tab8}'\
        f'{tab8}punch_attack_uses = {usos},\n'\
        f'{grupos}'\
        f'{tab8}}}\n'
    codigo_tool = f'minetest.register_tool("{mimod}:{miitem}",{{\n'\
        f'{descripcion}' \
        f'{inv}'\
        f'{tool_capabilities}}})'
    return codigo_tool

def crearReceta(tipo_receta,ingrediente,tiempo,cantidad):
    codigo_receta=""
    comentario=""

    if tipo_receta=="shapeless":
        ingrediente=""
        for i in ingredientes:
            if i=="\n":
                continue
            if ':' not in i:
                i=mimod+":"+i
            ingrediente+=f'{tab8}{tab8}"{i}",\n'
    desarrollo='''            
    if tipo_receta=="shaped":
        lainfo = """
        ireq=[]
        ingredientes=[]"""
        
        ingrediente=""
        total=""
        for j in range(0,3):
            cosas=[]    
            cod_fila=""
            for i in range(0,3):
                if ireq[i+3*j]:
                    cosas.append(f'""')
                else:
                    if ':' not in ingredientes[i+3*j] and ingredientes[i+3*j]!="\n":
                        cosas.append(f'"{mimod}:{ingredientes[i+3*j]}"')
            for c in cosas:
                cod_fila+=f'{c}'
            if cod_fila!="":
                total+=cod_fila+","
        if total!="":
            total="{"+total+"}"
        # si está vacío pero es requerido se añade a la fila
        
        ingrediente=ingrediente+total+","
        ingrediente="{"+ingrediente+"}"
    enproceso="""recipe = {
        {"mymod:diamond_fragments", "",                         ""},
        {"mymod:diamond_fragments", "mymod:diamond_fragments",  ""},
        {"mymod:diamond_fragments", "mymod:diamond_fragments",  ""}
    }"""

'''
    if (salida_receta=="" or ingrediente=="") and tipo_receta=="cooking":
        return ""
    if ingrediente=="" and tipo_receta=="fuel":
        return ""

    if ':' in salida_receta:
        comentario="-- TODO: check if the output corresponds to an existing item from another mod, if so, add dependencies\n"
        salida=salida_receta
    else:
        comentario="-- TODO: check if the output corresponds to an existing item\n"        
        salida=f"{mimod}:{salida_receta} {cantidad}"
    if tipo_receta=="fuel" or tipo_receta=="cooking":
        if ':' in ingrediente:
            comentario+="-- TODO: check if the ingredient corresponds to an existing item from another mod, if so, add dependencies\n"
            ingrediente=ingrediente
        else:
            comentario+="-- TODO: check if the ingredient corresponds to an existing item\n"
            ingrediente=f"{mimod}:{ingrediente}"
    output=f'{tab8}output = "{salida}",\n'

    tiempo_cocinado=""
    if tipo_receta=="cooking":
        tiempo_cocinado=f"cooktime = {tiempo},\n"
    if tipo_receta=="fuel":
        tiempo_cocinado=f"burntime = {tiempo},\n"    
        output=""
    if tipo_receta=="fuel" or tipo_receta=="cooking":
        ingrediente=f'recipe = "{ingrediente}",\n'
    else:
        ingrediente="{\n"+ingrediente+tab8+tab8+"}"
        ingrediente=f'recipe = {ingrediente},\n'

    tipo_receta=f'type = "{tipo_receta}",\n'
    codigo_receta=comentario
    codigo_receta += f'minetest.register_craft({{\n'\
        f'{tab8}{tipo_receta}' \
        f'{output}'\
        f'{tab8}{ingrediente}'\
        f'{tab8}{tiempo_cocinado}}})'
    return codigo_receta

def crearMesh(miitem,descripcion,inv):
    comentario="-- TODO: place .b3d file in models folder\n"
    descripcion=crearDescripcion(descripcion)
    inv=crearInventario(inv)
    codigo_mesh=comentario
    codigo_mesh+=f'minetest.register_node("{mimod}:{miitem}", {{\n' \
        f'{tab8}drawtype = "mesh",\n'   \
        f'{tab8}tiles = {{\n{tab8}{tab8}"{mimod}_{miitem}.png"\n{tab8}}},\n'    \
        f'{tab8}mesh = "{mimod}_{miitem}.b3d",\n'    \
        f'{descripcion}'    \
        f'{inv}'    \
        "})"
    return codigo_mesh

with st.sidebar:
    # mod
    mimod=st.text_input(frase(2),disabled=(st.session_state.nombre_fijado!=""),value=st.session_state.nombre_fijado)
    # validar nombre del mod, dejando solo caracteres permitidos
    mimod=validar(mimod)
    traductor="-- TODO - Add support for translation\n"
    traductor+="-- https://rubenwardy.com/minetest_modding_book/en/quality/translations.html\n"
    traductor+="-- https://github.com/minetest-tools/update_translations\n"
    traductor+=f'local S = minetest.get_translator("{mimod}")'
    traducir = st.checkbox(frase(1))

    # elementos
    tipo = st.radio(frase(0),
        ("node", "craftitem","tool","recipe","mesh"))

codigo_item = ""

if tipo=="node" or tipo=="tool" or tipo=="mesh" or tipo=="craftitem":
    miitem=st.text_input(frase(3))
    # validar nombre del nodo, dejando solo caracteres permitidos
    miitem=validar(miitem)
    descripcion=st.text_input(frase(4))
    inventario=st.checkbox(frase(13))            
if tipo=="node":               
    una_o_varias = st.radio(frase(5),
        (frase(6), frase(7)))
    if una_o_varias==frase(6):        
        resp_planta=st.radio(frase(9),
            ("normal","plantlike"))
    else:
        resp_planta=""
    modo=st.multiselect(frase(8),grupos)
if tipo=="tool":
    fpi=st.slider("Full punch_interval",0,10)        
    usos=st.slider("Punch attack uses",0,100)
    modo=st.multiselect(frase(8),grupos)
if tipo=="recipe":
    tipo_receta=st.radio(frase(14),("shapeless","shaped","cooking","fuel"))
    if tipo_receta=="fuel":
        cantidad=0
    else:
        cantidad=st.slider(frase(20))
    tiempo=0
    salida_receta=""
    if tipo_receta=="shaped" or tipo_receta=="shapeless":        
        ingrediente=""
        if tipo_receta=="shaped":
            st.warning("Feature in development, please stay tuned!")
    else:
        ingrediente=st.text_input(frase(16))
    if tipo_receta!="fuel":
        salida_receta=st.text_input(frase(15))
    if tipo_receta=="cooking":
        tiempo=st.slider("cooktime",1,60)
    if tipo_receta=="fuel":
        tiempo=st.slider("burntime",1,60)

def crearIngrediente(clave,requerir):
    if requerir:
        ireq.append(st.checkbox(frase(17),key=clave))
        if ireq[-1]:
            ingredientes.append(st.text_input(frase(19),key=clave+10,disabled=True,value=""))
        else:
            ingredientes.append(st.text_input(frase(19),key=clave+10,value="\n"))
    else:
        ingredientes.append(st.text_input(frase(19),key=clave+10,value="\n"))

if tipo=="recipe" and (tipo_receta=="shaped" or tipo_receta=="shapeless"):
    if tipo_receta=="shaped":
        st.write(frase(18))    
    # capturar ingredientes
    col1, col2, col3 = st.columns(3)
    
    with col1:
        for i in range(1,4):
            crearIngrediente(i,tipo_receta=="shaped")
    with col2:
        for i in range(4,7):
            crearIngrediente(i,tipo_receta=="shaped")
    with col3:
        for i in range(7,10):
            crearIngrediente(i,tipo_receta=="shaped")

# crear el código
if mimod=="":
    codigo_item=""
else:
    # las recetas no tienen nombre de item asociado, para ellas se permite vacío
    if tipo=="recipe":
        codigo_item=crearReceta(tipo_receta,ingrediente,tiempo,cantidad)
    else:
    # para los demás tipos es necesario poner nombre al item
        if miitem=="":        
            codigo_item=""
        else:
            if tipo=="tool":
                codigo_item = crearTool(miitem,descripcion,inventario,modo)
            elif tipo=="craftitem":
                codigo_item = crearCraftItem(miitem,descripcion,inventario)
            elif tipo=="node":
                codigo_item = crearNodo(miitem,descripcion,una_o_varias,resp_planta,modo,inventario)
            elif tipo=="mesh":
                codigo_item = crearMesh(miitem,descripcion,inventario)
            

# la primera vez añadimos el comienzo del mod
if codigo_total=="":
    codigo_total=cabecera
    if traducir:
        codigo_total+="\n"+traductor+"\n"

st.header(tipo)
st.code(codigo_item, language="lua")
if st.button(frase(11)):    
    # añadimos lo que hemos generado ahora a lo anterior       
    codigo_total+=codigo_item+"\n"
    # guardamos el código para la siguiente sesión
    st.session_state.codigo_completo=codigo_total
    # guardamos el nombre del mod para la siguiente sesión
    st.session_state.nombre_fijado=mimod
    st.success(frase(12), icon="✅")

st.header(frase(10))
st.code(codigo_total, language="lua")

#Descargar código
st.download_button(frase(21),
    codigo_total,
    file_name='init.lua'
)
